import numpy as np
import cv2
from pseyepy import Camera, Display
from PIL import Image
from labjack import ljm
import multiprocessing as mp
import tifffile as tf
import os
from datetime import datetime
import time as time
import socket
import csv
from copy import deepcopy

def showVideo(q_list, num_cams, folder_name):

    os.mkdir("./images/"+folder_name+"/") # sets up folder for imaging results
    
    for i in range(num_cams):
        os.mkdir("./images/"+folder_name+"/"+str(i))

    # cv2.startWindowThread() # starts display window

    q_closed = 0
    while True:
        frames = []
        try:
            top = q_list[0].get()
            if top == 'END': # end signal from queue
                break
            frames, timestamp = top # pull first frame off of queue
            for j in range(num_cams):
                name = "./images/"+folder_name+"/"+str(j)+"/"+ str(timestamp[j]) + ".tif"

                    # cv2.imshow("display"+str(j), frame)
                    # frames.append(frame)
                    #cv2.waitKey(1)

                tf.imwrite(name, frames[j], timestamp[j]) # writes output with timestamp
        except:
            pass
    print(q_list[0].qsize(), "show queue left over")
    print("window destroyed")


def getVideo(q_list, num_cams):

    c = Camera(range(num_cams), fps=[70]*num_cams, resolution=[Camera.RES_LARGE]*num_cams, colour=[False]*num_cams) # opens camera
    f0, t0 = c.read()
    print("opened cameras")
    # t = t0
    while q_list[-1].empty():
    # for i in range(500):
        frames, times = c.read()
        q_list[0].put((np.copy(frames), times))
        # if q_list[0].qsize() > 50:
            # print(q_list[0].qsize())
        # print((times[0]-t[0], times[1]-t[1]))
        # print(times)
        # t = times
    print(q_list[0].qsize(), "getVideo")
    
    q_list[0].put("END") # end signal
    c.end()

def listenTCPIP(q_list, folder_name):
    TCP_IP = "152.2.174.197"
    TCP_PORT = 12346

    serverSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    serverSocket.bind(("", TCP_PORT))


    serverSocket.listen()

    clientSocket, clientAddress = serverSocket.accept()
    print('Connected by', clientAddress)

    f = open("./images/"+folder_name+"/times.csv", "a")
    writer = csv.writer(f, delimiter=',', quotechar='"')

    chunks = bytearray(8)

    bytes_recvd = 0          
    while bytes_recvd < 8:
        chunk = clientSocket.recv(min(8 - bytes_recvd, 2048))
        chunks[bytes_recvd:bytes_recvd+len(chunk)] = chunk
        bytes_recvd += len(chunk)
        
    filename = np.frombuffer(chunks,dtype='>u4')
    print(filename)

    count = 0
    while q_list[-1].empty():
        bytes_recvd = 0          
        while bytes_recvd < 8:
            chunk = clientSocket.recv(min(8 - bytes_recvd, 2048))
            t = time.time()
            chunks[bytes_recvd:bytes_recvd+len(chunk)] = chunk
            bytes_recvd += len(chunk)
        
        number = np.frombuffer(chunks,dtype='>u4')
        if count%100 == 0:
            print(number)
        if count == 0:

        else:
            writer.writerow([t, number])
        count += 1

    # while q.empty():
        # msg = serverSocket.recv()
        # if len(msg) > 0:
            # writer.writerow([datetime.now(), msg])
    f.close()
    clientSocket.close()
    serverSocket.close()

    print("exited listenTCPIP process")

def getLabjack(q):
    print("labjack process")
    handle = ljm.openS("ANY", "ANY", "ANY")

    name = ["AIN0"]
    aScanList = ljm.namesToAddresses(1, name)[0]
    scanRate = 1000
    scansPerRead = int(scanRate / 2)

    ljm.eWriteName(handle, "STREAM_TRIGGER_INDEX", 0)
    ljm.eWriteName(handle, "STREAM_CLOCK_SOURCE", 0)

    aNames = ["AIN_ALL_NEGATIVE_CH", "AIN0_RANGE",
                  "STREAM_SETTLING_US", "STREAM_RESOLUTION_INDEX"]
    aValues = [ljm.constants.GND, 10.0, 0, 0]

    numFrames = len(aNames)
    ljm.eWriteNames(handle, numFrames, aNames, aValues)

    scanRate = ljm.eStreamStart(handle, scansPerRead, 1, aScanList, scanRate)

    start = datetime.now()
    totScans = 0
    totSkip = 0

    i = 0
    while q_list[-1].empty:
        ret = ljm.eStreamRead(handle)

        aData = ret[0]
        scans = len(aData)
        curSkip = aData.count(-9999.0)
        totScans += curSkip

        print(aData[0])
        i += 1
    
    ljm.close(handle)

if __name__ == "__main__":
    num_cams = int(input("Enter number of cameras: "))
    folder_name = input("Enter folder name: ")

    # c = Camera(range(num_cams), fps=[70]*num_cams, resolution=[Camera.RES_LARGE]*num_cams, colour=[False]*num_cams)

    q_list = [mp.Queue()]
    q_list.append(mp.Queue())
    # c.end()

    pget = mp.Process(target=getVideo, args=(q_list, num_cams, ))
    pshow = mp.Process(target=showVideo, args=(q_list, num_cams,folder_name, ))
    ptcpip = mp.Process(target=listenTCPIP, args=(q_list, folder_name, ))
    # plabjack = mp.Process(target=getLabjack, args=(q_list[-1], ))
    
    # plabjack.start()
    
    ptcpip.start()
    pget.start()
    pshow.start()

    i = input("Press enter to stop collection.\n")
    q_list[-1].put(i)

    # print("waiting")
    pget.join()
    # print("joined1")
    pshow.join()
    ptcpip.join()
    # print("joined2")
    # plabjack.join()
    # print("joined3")
