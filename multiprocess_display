import numpy as np
import cv2
from pseyepy import Camera, Display
from PIL import Image
from labjack import ljm
import multiprocessing as mp
import tifffile as tf
import os
from datetime import datetime
import time as time
import socket
import csv

def showVideo(q_list, folder_name):
    num_cams = len(q_list)-1
    try:
        os.mkdir("./images/"+folder_name+"/") # sets up folder for imaging results
    except:
        os.mkdir("./images/"+folder_name+"duplicate/")
    for i in range(num_cams):
        os.mkdir("./images/"+folder_name+"/"+str(i))

    # cv2.startWindowThread() # starts display window

    q_closed = 0
    while True:
        frames = []
        for j in range(num_cams):
            top = q_list[j].get()
            if top == 'END': # end signal from queue
                q_closed += 1
            else:
                frame, timestamp = top # pull first frame off of queue
                name = "./images/"+folder_name+"/"+str(j)+"/"+ str(timestamp) + ".tif"

                # cv2.imshow("display"+str(j), frame)
                # frames.append(frame)
                #cv2.waitKey(1)

                tf.imwrite(name, frame, timestamp) # writes output with timestamp
        if q_closed == num_cams:
            break
    print("window destroyed")


def getVideo(q_list):
    num_cams = len(q_list)-1

    c = Camera(range(num_cams), fps=[70]*num_cams, resolution=[Camera.RES_LARGE]*num_cams, colour=[False]*num_cams) # opens camera
    f0, t0 = c.read(0)
    print("opened cameras")

    while q_list[-1].empty():
        for i in range(num_cams):
            frame, t = c.read(i)
            q_list[i].put((frame, datetime.now())) # puts frame on queue
    
    for j in range(num_cams):
        q_list[j].put("END") # end signal
    c.end()

def listenTCPIP(q_list, folder_name):
    TCP_IP = "152.2.174.197"
    TCP_PORT = 12345

    serverSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    serverSocket.bind(("", TCP_PORT))
#    serverSocket.connect(("", TCP_PORT))

    serverSocket.listen()

    clientSocket, clientAddress = serverSocket.accept()
    clientSocket.settimeout(10.0)
    print('Connected by', clientAddress)

    f = open("./images/"+folder_name+"/times.csv", "a")
    writer = csv.writer(f, delimiter=',', quotechar='"')

    chunks = bytearray(4)
    count = 0
    while q_list[-1].empty():
        bytes_recvd = 0
        try:       
            while bytes_recvd < 4:
                chunk = clientSocket.recv(min(8 - bytes_recvd, 2048))
                t = time.time()
                chunks[bytes_recvd:bytes_recvd+len(chunk)] = chunk
                bytes_recvd += len(chunk)
            
            number = np.frombuffer(chunks,dtype='<u2')
            if count%100 == 0:
                print(number)
            writer.writerow([t, number])
            count += 1
        except socket.timeout:
            print("timed out")
    print(q_list[-1].empty())

    # while q.empty():
        # msg = serverSocket.recv()
        # if len(msg) > 0:
            # writer.writerow([datetime.now(), msg])
    f.close()
    clientSocket.close()
    serverSocket.close()

    print("exited listenTCPIP process")

def getLabjack(q):
    print("labjack process")
    handle = ljm.openS("ANY", "ANY", "ANY")

    name = ["AIN0"]
    aScanList = ljm.namesToAddresses(1, name)[0]
    scanRate = 1000
    scansPerRead = int(scanRate / 2)

    ljm.eWriteName(handle, "STREAM_TRIGGER_INDEX", 0)
    ljm.eWriteName(handle, "STREAM_CLOCK_SOURCE", 0)

    aNames = ["AIN_ALL_NEGATIVE_CH", "AIN0_RANGE",
                  "STREAM_SETTLING_US", "STREAM_RESOLUTION_INDEX"]
    aValues = [ljm.constants.GND, 10.0, 0, 0]

    numFrames = len(aNames)
    ljm.eWriteNames(handle, numFrames, aNames, aValues)

    scanRate = ljm.eStreamStart(handle, scansPerRead, 1, aScanList, scanRate)

    start = datetime.now()
    totScans = 0
    totSkip = 0

    i = 0
    while q_list[-1].empty:
        ret = ljm.eStreamRead(handle)

        aData = ret[0]
        scans = len(aData)
        curSkip = aData.count(-9999.0)
        totScans += curSkip

        print(aData[0])
        i += 1
    
    ljm.close(handle)

if __name__ == "__main__":
    num_cams = int(input("Enter number of cameras: "))
    folder_name = input("Enter folder name: ")

    c = Camera(range(num_cams), fps=[70]*num_cams, resolution=[Camera.RES_LARGE]*num_cams, colour=[False]*num_cams)

    q_list = []
    for i in range(num_cams):
        q = mp.Queue()
        first = c.read(i)
        q.put(first)
        q_list.append(q)
    q_list.append(mp.Queue())
    c.end()

    pget = mp.Process(target=getVideo, args=(q_list,))
    pshow = mp.Process(target=showVideo, args=(q_list, folder_name, ))
    ptcpip = mp.Process(target=listenTCPIP, args=(q_list, folder_name, ))
    # plabjack = mp.Process(target=getLabjack, args=(q_list[-1], ))
    
    # plabjack.start()
    
    ptcpip.start()
    pget.start()
    pshow.start()

    i = input("Press enter to stop collection.\n")
    q_list[-1].put(i)

    # print("waiting")
    pget.join()
    # print("joined1")
    pshow.join()
    ptcpip.join()
    # print("joined2")
    # plabjack.join()
    # print("joined3")
